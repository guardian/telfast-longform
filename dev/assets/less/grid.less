/* ============================================

	Grid

=============================================== */

// column building utilities
.makeColumn(@index) {
	@col-single: 100/@column-count;
	@width: round(@col-single * @index, 3);
	width: unit(@width, %);
}

.makeOffset(@index) {
	@col-single: 100/@column-count;
	@offset: round(@col-single * @index, 3);
	margin-left: unit(@offset, %);
}

.makePull(@index) {
	position: relative;
	@col-single: 100/@column-count;
	@offset: round(@col-single * @index, 3);
	right: unit(@offset, %);
}

.makePush(@index) {
	position: relative;
	@col-single: 100/@column-count;
	@offset: round(@col-single * @index, 3);
	left: unit(@offset, %);
}

// pass in responsive size, column count
// loop through building cols and offset
// for given no. of columns
.makeGrid(@class, @n, @i:1) when (@i =< @n) {
	.col-@{class}-@{i} 	{
		.makeColumn(@i);
	}
	.col-@{class}-offset-@{i} 	{
		.makeOffset(@i);
	}
	.col-@{class}-pull-@{i} 	{
		.makePull(@i);
	}
	.col-@{class}-push-@{i} 	{
		.makePush(@i);
	}
	.makeGrid(@class, @n, (@i + 1));
}

.clear-row {
	&:before,
	&:after {
	    content: " ";
	    display: table;
	}
	&:after {
	    clear: both;
	}
}

// main container
.container {
	.clear-row;
	margin: 0 auto;
	width: 100%;
	padding: 0 unit(@gutter * 2, px);

	.container {
		padding: 0;
	}

	@media @tablet {
		padding: 0;
		width: @screen-tablet;
	}
	@media @desktop {
		width: @screen-desktop;
	}
	@media @wide {
		width: @screen-wide;
	}

	@media @xwide {
		width: @screen-xwide;
	}
}

// rows, with various classes to adjust gutters
.row {
	.clear-row;
	margin-left: 0;
	margin-right: 0;

	@media @tablet {
		margin-left: floor(unit(-@gutter, px));
		margin-right: floor(unit(-@gutter, px));

		&.row--lg,
		.row--lg {
			margin-left:  floor(unit(-@gutter * 2, px)) !important;
			margin-right: floor(unit(-@gutter * 2, px)) !important;
		}
		&.row--sm,
		.row--sm {
			margin-left:  floor(unit(-@gutter / 2, px)) !important;
			margin-right: floor(unit(-@gutter / 2, px)) !important;
		}

		&.row--xs,
		.row--xs {
			margin-left:  floor(unit(-@gutter / 10, px)) !important;
			margin-right: floor(unit(-@gutter / 10, px)) !important;
		}
	}

	@media @wide {
		.row--lg > & {
			margin-left:  floor(unit(-@gutter * 3, px)) !important;
			margin-right: floor(unit(-@gutter * 3, px)) !important;
		}
	}

	&.row--gutterless  {
		margin-left:  0 !important;
		margin-right: 0 !important;
	}

	&.row--table {
		@media @tablet {
			display: table;
			width: 100%;
			table-layout: fixed;
		}
	}
}

// column basic styles
[class*="col-"],
.column {
	box-sizing: border-box;
	float: left;
	min-height: 1px;
	width: 100%;
	padding-left: 0;
	padding-right: 0;


	@media @tablet {
		padding-left: floor(unit(@gutter, px));
		padding-right: floor(unit(@gutter, px));

		.row--lg > & {
			padding-left: floor(unit(@gutter * 2, px));
			padding-right: floor(unit(@gutter * 2, px));

		}
		.row--sm > & {
			padding-left: floor(unit(@gutter / 2, px));
			padding-right: floor(unit(@gutter / 2, px));
		}

		.row--xs > & {
			padding-left: floor(unit(@gutter / 10, px));
			padding-right: floor(unit(@gutter / 10, px));
		}
	}

	@media @wide {
		.row--lg > & {
			padding-left: floor(unit(@gutter * 3, px));
			padding-right: floor(unit(@gutter * 3, px));
		}
	}

	.row--gutterless > & {
		padding-left: 0;
		padding-right: 0;
	}

	.row--table > & {
		@media @tablet {
			display: table-cell;
			float: none;
			height: 100%;
			vertical-align: top;
		}
	}
}


// aaaaaaand let's create the columns
@media @mobile {
	.makeGrid(xs, @column-count);
}

@media @tablet {
	.makeGrid(sm, @column-count);
	.col-sm-offset-0 { margin-left: 0; }
}

@media @desktop {
	.makeGrid(md, @column-count);
	.col-md-offset-0 { margin-left: 0; }
}

@media @wide {
	.makeGrid(lg, @column-count);
	.col-lg-offset-0 { margin-left: 0; }
}
